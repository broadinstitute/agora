{{with $environment := env "ENVIRONMENT"}}{{$keyname := printf "secret/dsde/%s/agora/agora.conf" $environment}}{{with vault $keyname}}

webserivce.port = {{.Data.webserivce_port}}
webservice.interface = {{.Data.webservice_interface}}
webservice.host = {{.Data.webservice_host}}
webservice.schema = {{.Data.webservice_schema}}

instance.name = "{{.Data.instance_name}}"
mongodb.hosts = {{.Data.mongodb_hosts}}
mongodb.ports = {{.Data.mongodb_ports}}
mongodb.user = "{{.Data.mongodb_user}}"
mongodb.password = "{{.Data.mongodb_password}}"
mongodb.db = "{{.Data.mongodb_db}}"

environment = "{{.Data.environment}}"
mockAuthenticatedUserEmail = "{{.Data.mock_authenticated_user_email}}"

swagger {
  apiDocs = "{{.Data.swagger_api_docs}}"
  apiVersion = "{{.Data.swagger_api_version}}"
  baseUrl = "{{.Data.swagger_base_url}}"
  contact = "{{.Data.swagger_contact}}"
  description = "{{.Data.swagger_description}}"
  info = "{{.Data.swagger_info}}"
  license = "{{.Data.swagger_license}}"
  licenseUrl = "{{.Data.swagger_license_url}}"
  swaggerVersion = "{{.Data.swagger_version}}"
  termsOfServiceUrl = "{{.Data.terms_of_service_url}}"
}

gcs.project.id = "{{.Data.gcs_project_id}}"
gcs.service.account.email = "{{.Data.gcs_service_account_email}}"
gcs.service.account.pem.file = "{{.Data.gcs_service_account_pem_file}}"
gcs.user.email = "{{.Data.gcs_user_email}}"
admin.google.group = "{{.Data.gcs_admin_google_group}}"

sqlDatabase = {
  url = "{{.Data.sql_url}}"
  driver = "{{.Data.sql_driver}}"
  user = "{{.Data.sql_user}}"
  password = "{{.Data.sql_password}}"
}

kamon.instrumentation = {{.Data.kamon_instrumentation}}
kamon.internal-config {
  akka {
    loglevel = {{.Data.kamon_akka_loglevel}}

    actor.default-dispatcher {
      fork-join-executor.parallelism-factor = {{.Data.kamon_actor_default_dispatcher_fork_join_executor_parallelism_factor}}
    }
  }
}

kamon.metric.filters {
  akka-dispatcher {
    includes = {{.Data.kamon_akka_dispatcher_includes}}
    excludes = {{.Data.kamon_akka_dispatcher_excludes}}
  }

  akka-actor {
    includes = {{.Data.kamon_akka_actor_includes}}
    excludes = {{.Data.kamon_akka_actor_excludes}}
  }

  akka-router {
    includes = {{.Data.kamon_akka_router_includes}}
    excludes = {{.Data.kamon_akka_router_excludes}}
  }
}

kamon {
  statsd {

    # Hostname and port in which your StatsD is running. Remember that StatsD packets are sent using UDP and
    # setting unreachable hosts and/or not open ports wont be warned by the Kamon, your data wont go anywhere.
    hostname = "{{.Data.kamon_dashboard_hostname}}"
    port = {{.Data.kamon_dashboard_port}}

    # Interval between metrics data flushes to StatsD. It's value must be equal or greater than the
    # kamon.metric.tick-interval setting.
    flush-interval = {{.Data.kamon_flush_interval}}

    # Max packet size for UDP metrics data sent to StatsD.
    max-packet-size = {{.Data.kamon_max_packet_size}}

    # Subscription patterns used to select which metrics will be pushed to StatsD. Note that first, metrics
    # collection for your desired entities must be activated under the kamon.metrics.filters settings.
    subscriptions {
      histogram       = {{.Data.kamon_subscriptions_histogram}}
      min-max-counter = {{.Data.kamon_subscriptions_min_max_counter}}
      gauge           = {{.Data.kamon_subscriptions_gauge}}
      counter         = {{.Data.kamon_subscriptions_counter}}
      trace           = {{.Data.kamon_subscriptions_trace}}
      trace-segment   = {{.Data.kamon_subscriptions_trace_segment}}
      akka-actor      = {{.Data.kamon_subscriptions_akka_actor}}
      akka-dispatcher = {{.Data.kamon_subscriptions_akka_dispatcher}}
      akka-router     = {{.Data.kamon_subscriptions_akka_router}}
      system-metric   = {{.Data.kamon_subscriptions_system_metric}}
      http-server     = {{.Data.kamon_subscriptions_http_server}}
    }

    # FQCN of the implementation of `kamon.statsd.MetricKeyGenerator` to be instantiated and used for assigning
    # metric names. The implementation must have a single parameter constructor accepting a `com.typesafe.config.Config`.
    metric-key-generator = {{.Data.kamon_metric_key_generator}}

    simple-metric-key-generator {

      # Application prefix for all metrics pushed to StatsD. The default namespacing scheme for metrics follows
      # this pattern:
      #    application.host.entity.entity-name.metric-name
      application = "{{.Data.kamon_application}}"

      # Includes the name of the hostname in the generated metric. When set to false, the scheme for the metrics
      # will look as follows:
      #    application.entity.entity-name.metric-name
      include-hostname = {{.Data.kamon_include_hostname}}

      # Allow users to override the name of the hostname reported by kamon. When changed, the scheme for the metrics
      # will have the following pattern:
      #   application.hostname-override-value.entity.entity-name.metric-name
      hostname-override = "{{.Data.kamon_hostname_override}}"

      # When the sections that make up the metric names have special characters like dots (very common in dispatcher
      # names) or forward slashes (all actor metrics) we need to sanitize those values before sending them to StatsD
      # with one of the following strategies:
      #   - normalize: changes ': ' to '-' and ' ', '/' and '.' to '_'.
      #   - percent-encode: percent encode the section on the metric name. Please note that StatsD doesn't support
      #     percent encoded metric names, this option is only useful if using our docker image which has a patched
      #     version of StatsD or if you are running your own, customized version of StatsD that supports this.
      metric-name-normalization-strategy = {{.Data.kamon_metric_name_normalization_strategy}}
    }
  }

  modules {
    kamon-statsd {
      auto-start = {{.Data.kamon_auto_start}}
      requires-aspectj = {{.Data.kamon_requires_aspectj}}
      extension-id = "{{.Data.kamon_extension_id}}"
    }
  }
}
{{end}}
{{end}}
