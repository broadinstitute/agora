webservice.scheme = "http"
webservice.host = "localhost"
webservice.port = 8000
webservice.interface = 0.0.0.0
instance.name = "reference"

mongodb.host = "localhost"
mongodb.port = 27017

environment = "local"
prod {
  useOpenAMAuthentication = true
  useStandaloneMongo = true
  useGcsAuthorizationProvider = true
}
ci {
  useOpenAMAuthentication = true
  useStandaloneMongo = true
  useGcsAuthorizationProvider = true
}
dev {
  useOpenAMAuthentication = true
  useStandaloneMongo = true
  useGcsAuthorizationProvider = true
}
local {
  useOpenAMAuthentication = false
  useStandaloneMongo = false
  useGcsAuthorizationProvider = false
  // If not using openAMAuthentication, you need to supply a mock authenticated email.
  mockAuthenticatedUserEmail = "broadprometheustest@gmail.com"
}

swagger {
  apiDocs = "api-docs"
  apiVersion = "0.1"
  baseUrl = "/"
  contact = "dsde-engineering@broadinstitute.org"
  description = "Agora stores nethods along with metadata." // TODO!!! More info
  info = "Agora Methods Repository"
  license = "BSD"
  licenseUrl = "http://opensource.org/licenses/BSD-3-Clause"
  swaggerVersion = "1.3"
  termsOfServiceUrl = "http://www.github.com/broadinstitute/agora"
}

akka {
  loggers = ["akka.event.slf4j.Slf4jLogger"]
}

//because we don't have control over the OpenAMConfig object in the vault common this needs we are not able
//to have fallback values. The following commented out values need to be set in application.conf on the deployment server.
//openam {
//  deploymentUri = "openam_url_goes_here"
//  realm = "/apollo"
//}

// Agora needs an associated google-project under which to create GCS objects.
// Create a service account with p12 key associated with this project and record it's info in application.conf on the deployment server.
//gcs.project.id = "my-google-project"
//gcs.service.account.email = "TODO@broadinstitute.org"
//gcs.service.account.p12.key.file = "MyProject.p12"