webservice.scheme = "http"
webservice.host = "localhost"
webservice.port = 8000
webservice.interface = 0.0.0.0
instance.name = "reference"

mongodb.host = "localhost"
mongodb.port = 27017

environment = "local"
mockAuthenticatedUserEmail = "broadprometheustest@gmail.com"
supervisor.logging = false

swagger {
  apiDocs = "api-docs"
  apiVersion = "0.1"
  baseUrl = "/"
  contact = "dsde-engineering@broadinstitute.org"
  description = "Agora stores nethods along with metadata." // TODO!!! More info
  info = "Agora Methods Repository"
  license = "BSD"
  licenseUrl = "http://opensource.org/licenses/BSD-3-Clause"
  swaggerVersion = "1.3"
  termsOfServiceUrl = "http://www.github.com/broadinstitute/agora"
}

akka {
  loggers = ["akka.event.slf4j.Slf4jLogger"]
}

kamon.instrumentation = false
kamon.internal-config {
  akka {
    loglevel = INFO

    actor.default-dispatcher {
      fork-join-executor.parallelism-factor = 1.0
    }
  }
}

kamon.metric.filters {
  akka-dispatcher {
    includes = [ "agora/user/**" ]
    excludes = [ ]
  }

  akka-actor {
    includes = [ "agora/user/**" ]
    excludes = [ ]
  }

  akka-router {
    includes = [ "agora/user/**" ]
    excludes = []
  }
}

kamon {
  statsd {

    # Hostname and port in which your StatsD is running. Remember that StatsD packets are sent using UDP and
    # setting unreachable hosts and/or not open ports wont be warned by the Kamon, your data wont go anywhere.
    hostname = "dashboard.dsde-dev.broadinstitute.org"
    port = 8125

    # Interval between metrics data flushes to StatsD. It's value must be equal or greater than the
    # kamon.metric.tick-interval setting.
    flush-interval = 10 seconds

    # Max packet size for UDP metrics data sent to StatsD.
    max-packet-size = 1024 bytes

    # Subscription patterns used to select which metrics will be pushed to StatsD. Note that first, metrics
    # collection for your desired entities must be activated under the kamon.metrics.filters settings.
    subscriptions {
      histogram       = [ "**" ]
      min-max-counter = [ "**" ]
      gauge           = [ "**" ]
      counter         = [ "**" ]
      trace           = [ "**" ]
      trace-segment   = [ "**" ]
      akka-actor      = [ "**" ]
      akka-dispatcher = [ "**" ]
      akka-router     = [ "**" ]
      system-metric   = [ "**" ]
      http-server     = [ "**" ]
    }

    # FQCN of the implementation of `kamon.statsd.MetricKeyGenerator` to be instantiated and used for assigning
    # metric names. The implementation must have a single parameter constructor accepting a `com.typesafe.config.Config`.
    metric-key-generator = kamon.statsd.SimpleMetricKeyGenerator

    simple-metric-key-generator {

      # Application prefix for all metrics pushed to StatsD. The default namespacing scheme for metrics follows
      # this pattern:
      #    application.host.entity.entity-name.metric-name
      application = "agora"

      # Includes the name of the hostname in the generated metric. When set to false, the scheme for the metrics
      # will look as follows:
      #    application.entity.entity-name.metric-name
      include-hostname = true

      # Allow users to override the name of the hostname reported by kamon. When changed, the scheme for the metrics
      # will have the following pattern:
      #   application.hostname-override-value.entity.entity-name.metric-name
      hostname-override = none

      # When the sections that make up the metric names have special characters like dots (very common in dispatcher
      # names) or forward slashes (all actor metrics) we need to sanitize those values before sending them to StatsD
      # with one of the following strategies:
      #   - normalize: changes ': ' to '-' and ' ', '/' and '.' to '_'.
      #   - percent-encode: percent encode the section on the metric name. Please note that StatsD doesn't support
      #     percent encoded metric names, this option is only useful if using our docker image which has a patched
      #     version of StatsD or if you are running your own, customized version of StatsD that supports this.
      metric-name-normalization-strategy = normalize
    }
  }

  modules {
    kamon-statsd {
      auto-start = yes
      requires-aspectj = no
      extension-id = "kamon.statsd.StatsD"
    }
  }
}

//because we don't have control over the OpenAMConfig object in the vault common this needs we are not able
//to have fallback values. The following commented out values need to be set in application.conf on the deployment server.
//openam {
//  deploymentUri = "openam_url_goes_here"
//  realm = "/apollo"
//}

// Agora needs an associated google-project under which to create GCS objects.
// Create a service account with p12 key associated with this project and record it's info in application.conf on the deployment server.
//gcs.project.id = "my-google-project"
//gcs.service.account.email = "TODO@broadinstitute.org"
//gcs.service.account.p12.key.file = "MyProject.p12"

// Add a SQL database to application.conf

// MySQL example
//sqlDatabase = {
//  url = "jdbc:mysql://DB_HOST:DB_PORT/DB_NAME"
//  driver = com.mysql.jdbc.Driver
//  user = DB_USER
//  password = DB_PASSWORD
//}

// H2 example
sqlDatabase = {
  url = "jdbc:h2:file:local"
  user = root
  driver = org.h2.Driver
  connectionPool = disabled
  keepAliveConnection = true
}