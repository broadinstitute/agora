swagger: '2.0'
info:
  title: Agora API
  description: All of the Green
  version: 1.0.0
produces:
  - application/json
  - text/plain
basePath: /
paths:
  /status:
    get:
      produces:
      - application/json
      summary: Returns status code for connection to database
      responses:
        '200':
          description: OK
        '500':
          description: Internal server error
      tags:
        - Status
  /api/v1/methods:
    get:
      summary: List methods
      description: |
        The Methods endpoint returns all methods the requester
        has permissions to read that fit the filter criteria.
      parameters:
        - name: namespace
          in: query
          description: Namespace of method.
          required: false
          type: string
        - name: name
          in: query
          description: Name of method.
          required: false
          type: string
        - name: snapshotId
          in: query
          description: Snapshot ID of method.
          required: false
          type: number
        - name: synopsis
          in: query
          description: Synopsis of method.
          required: false
          type: string
        - name: documentation
          in: query
          description: Documentation of method.
          required: false
          type: string
        - name: owner
          in: query
          description: Owner of method.
          required: false
          type: string
        - name: payload
          in: query
          description: Payload of method in WDL.
          required: false
          type: string
        - name: entityType
          in: query
          description: Type of Method - Task or Workflow
          required: false
          type: string
        - name: excludedFields
          in: query
          description: Fields to exclude in JSON response.
          required: false
          type: string
        - name: includedFields
          in: query
          description: Fields to include in JSON response
          required: false
          type: string
      tags:
        - Methods
      responses:
        '200':
          description: An array of methods.
          schema:
            type: array
            items:
              $ref: '#/definitions/MethodResponse'
        default:
          description: Unexpected error
          schema:
            type: object
            $ref: '#/definitions/Error'
      security:
        - authorization:
            - openid
            - email
            - profile
    post:
      summary: Add a Method.
      description: |
        Inserts a method into the method repository and
        gives the owner full access permissions. Must supply a namespace
        name, payload, and entityType. Cannot supply a snapshotId
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: body
          in: body
          description: Agora Entity
          required: false
          schema:
            type: object
            $ref: '#/definitions/MethodQuery'
      tags:
        - Methods
      responses:
        '201':
          description: Method successfully added.
          schema:
            type: object
            $ref: '#/definitions/MethodResponse'
        '400':
          description: Malformed input.
          schema:
            type: object
            $ref: '#/definitions/BadRequest'
        '500':
          description: Internal error.
          schema:
            type: object
            $ref: '#/definitions/Error'
      security:
        - authorization:
            - openid
            - email
            - profile
  /api/v1/methods/definitions:
    get:
      summary: List method definitions
      description: |
        List method definitions - i.e. unique namespace/name pairs - with counts
        of snapshots and associated configurations
      tags:
        - Methods
      responses:
        '200':
          description: An array of method definitions.
          schema:
            type: array
            items:
              $ref: '#/definitions/MethodDefinition'
        default:
          description: Unexpected error
          schema:
            type: object
            $ref: '#/definitions/Error'
      security:
        - authorization:
            - openid
            - email
            - profile
  /api/v1/methods/{namespace}/{name}/configurations:
    get:
      summary: List configurations associated with a method
      description: |
        Given the namespace/name of a method, returns all configurations
        in the repository that reference that method
      parameters:
        - name: namespace
          in: path
          description: Namespace of method.
          required: true
          type: string
        - name: name
          in: path
          description: Name of method.
          required: true
          type: string
      tags:
        - Methods
        - Configurations
      responses:
        '200':
          description: An array of configurations.
          schema:
            type: array
            items:
              $ref: '#/definitions/ConfigurationResponseWithPayloadObject'
        '404':
          description: Method not found.
          schema:
            type: object
            $ref: '#/definitions/NotFound'
        default:
          description: Unexpected error
          schema:
            type: object
            $ref: '#/definitions/Error'
      security:
        - authorization:
            - openid
            - email
            - profile
  '/api/v1/methods/{namespace}/{name}/{snapshotId}':
    get:
      summary: Find a single method.
      description: |
        Returns one method that matches the namespace,
        name, and snapshotId.
      parameters:
        - name: namespace
          in: path
          description: Namespace of method.
          required: true
          type: string
        - name: name
          in: path
          description: Name of method.
          required: true
          type: string
        - name: snapshotId
          in: path
          description: Snapshot ID of method.
          required: true
          type: number
        - name: onlyPayload
          in: query
          description: Boolean to return only the payload of the method.
          required: false
          type: boolean
          default: false
      tags:
        - Methods
      responses:
        '200':
          description: A single method.
          schema:
            type: object
            $ref: '#/definitions/MethodResponse'
        default:
          description: Unexpected error
          schema:
            type: object
            $ref: '#/definitions/Error'
      security:
        - authorization:
            - openid
            - email
            - profile
    delete:
      summary: Redact a single method.
      description: |
        Redacts a method and all of its associated configurations
      parameters:
        - name: namespace
          in: path
          description: Namespace of method.
          required: true
          type: string
        - name: name
          in: path
          description: Name of method.
          required: true
          type: string
        - name: snapshotId
          in: path
          description: Snapshot ID of method.
          required: true
          type: number
      tags:
        - Methods
      responses:
        '200':
          description: |
            An integer showing how many methods were deleted.
          schema:
            type: number
        default:
          description: Error upon redaction
          schema:
            type: object
            $ref: '#/definitions/Error'
    post:
      summary: Create a new snapshot of an existing Method.
      description: |
        Inserts a new snapshot of the method into the method repository and
        copies access permissions from previous snapshot, optionally redacting
        the source snapshot. Documentation, synopsis, and payload are the only
        arguments considered for the new snapshot; everything else is copied
        from the source.
      consumes:
        - application/json
      produces:
        - application/json
        - text/plain
      parameters:
        - name: namespace
          in: path
          description: Namespace of source method.
          required: true
          type: string
        - name: name
          in: path
          description: Name of source method.
          required: true
          type: string
        - name: snapshotId
          in: path
          description: Snapshot ID of source method.
          required: true
          type: number
        - name: redact
          in: query
          description: Should the source method be redacted?
          required: false
          type: boolean
          default: false
        - name: body
          in: body
          description: Agora Entity
          required: false
          schema:
            type: object
            $ref: '#/definitions/MethodQuery'
      tags:
        - Methods
      responses:
        '200':
          description: Method successfully copied.
          schema:
            type: object
            $ref: '#/definitions/MethodResponse'
        '206':
          description: Method successfully copied, but error while redacting.
          schema:
            type: object
            $ref: '#/definitions/MethodResponse'
        '400':
          description: Malformed input.
          schema:
            type: object
            $ref: '#/definitions/BadRequest'
        '403':
          description: Forbidden to create copy.
          schema:
            type: object
            $ref: '#/definitions/Error'
        '404':
          description: Source snapshot not found.
          schema:
            type: object
            $ref: '#/definitions/Error'
        '500':
          description: Internal error.
          schema:
            type: object
            $ref: '#/definitions/Error'
      security:
        - authorization:
            - openid
            - email
            - profile
  /api/v1/configurations:
    get:
      summary: List configurations
      description: |
        The configurations endpoint returns all configurations the requester
        has permissions to read that fit the filter criteria.
      parameters:
        - name: namespace
          in: query
          description: Namespace of method.
          required: false
          type: string
        - name: name
          in: query
          description: Name of method.
          required: false
          type: string
        - name: snapshotId
          in: query
          description: Snapshot ID of method.
          required: false
          type: number
        - name: synopsis
          in: query
          description: Synopsis of method.
          required: false
          type: string
        - name: documentation
          in: query
          description: Documentation of method.
          required: false
          type: string
        - name: owner
          in: query
          description: Owner of method.
          required: false
          type: string
        - name: payload
          in: query
          description: Payload of method in WDL.
          required: false
          type: string
        - name: entityType
          in: query
          description: Type of Method - Task or Workflow
          required: false
          type: string
        - name: excludedFields
          in: query
          description: Fields to exclude in JSON response.
          required: false
          type: string
        - name: includedFields
          in: query
          description: Fields to include in JSON response
          required: false
          type: string
      tags:
        - Configurations
      responses:
        '200':
          description: An array of configurations.
          schema:
            type: array
            items:
              $ref: '#/definitions/ConfigurationResponse'
        default:
          description: Unexpected error
          schema:
            type: object
            $ref: '#/definitions/Error'
      security:
        - authorization:
            - openid
            - email
            - profile
    post:
      summary: Add a Method.
      description: |
        Inserts a method into the method repository and
        gives the owner full access permissions. Must supply a namespace
        name, payload, and entityType. Cannot supply a snapshotId
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: body
          in: body
          description: Agora Entity
          required: false
          schema:
            type: object
            $ref: '#/definitions/ConfigurationQuery'
      tags:
        - Configurations
      responses:
        '201':
          description: Method successfully added.
          schema:
            type: object
            $ref: '#/definitions/ConfigurationResponse'
        '400':
          description: Malformed input.
          schema:
            type: object
            $ref: '#/definitions/BadRequest'
        '500':
          description: Internal error.
          schema:
            type: object
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            type: object
            $ref: '#/definitions/Error'
      security:
        - authorization:
            - openid
            - email
            - profile
  '/api/v1/configurations/{namespace}/{name}/{snapshotId}':
    get:
      summary: Find a single method configuration.
      description: |
        Returns one method that matches the namespace,
        name, and snapshotId.
      parameters:
        - name: namespace
          in: path
          description: Namespace of method.
          required: true
          type: string
        - name: name
          in: path
          description: Name of method.
          required: true
          type: string
        - name: snapshotId
          in: path
          description: Snapshot ID of method.
          required: true
          type: number
        - name: payloadAsObject
          in: query
          description: Instead of returning a string under key payload, return a JSON object under key payloadObject
          required: false
          type: boolean
          default: false
      tags:
        - Configurations
      responses:
        '200':
          description: An array of configurations.
          schema:
            type: object
            $ref: '#/definitions/ConfigurationResponse'
        default:
          description: Unexpected error
          schema:
            type: object
            $ref: '#/definitions/Error'
      security:
        - authorization:
            - openid
            - email
            - profile
    delete:
      summary: Redact a single configuration.
      description: |
        Redacts a configuration and all of its associated configurations
      parameters:
        - name: namespace
          in: path
          description: Namespace of config.
          required: true
          type: string
        - name: name
          in: path
          description: Name of config.
          required: true
          type: string
        - name: snapshotId
          in: path
          description: Snapshot ID of config.
          required: true
          type: number
      tags:
        - Configurations
      responses:
        '200':
          description: >
            An integer showing how many configurations were deleted. Should be
            1.
          schema:
            type: number
        default:
          description: Error upon redaction
          schema:
            type: object
            $ref: '#/definitions/Error'
  '/api/v1/methods/{namespace}/permissions':
    get:
      summary: List permissions on namespace.
      description: |
        List permissions on namespace.
      parameters:
        - name: namespace
          in: path
          description: Namespace
          required: true
          type: string
      tags:
        - NamespacePermissions
      responses:
        '200':
          description: An array of permissions.
          schema:
            type: array
            items:
              type: object
              $ref: '#/definitions/AccessControl'
        default:
          description: Unexpected error
          schema:
            type: object
            $ref: '#/definitions/Error'
      security:
        - authorization:
            - openid
            - email
            - profile
    post:
      summary: Add a permissions on namespace.
      description: >
        Add a permissions on namespace. Will edit if user already has some
        permission on namespace. Can accept a batch. Either url params or
        a body is required. If both are provdided, the body will override
        the url params.
      parameters:
        - name: namespace
          in: path
          description: Namespace
          required: true
          type: string
        - name: user
          in: query
          description: "User's email or 'public'."
          required: false
          type: string
        - name: roles
          in: query
          description: 'List of comma seperated roles -- i.e. Read,Write,Create,Redact,Manage or "All" or "Nothing". NO SPACES.'
          required: false
          type: string
        - name: list of permissions
          in: body
          description: |
            List of access control objects (user, roles). Can edit or delete (with 'Nothing')
            permissions using this path as well.
          required: false
          schema:
            type: array
            items:
              $ref: '#/definitions/AccessControl'
      tags:
        - NamespacePermissions
      responses:
        '200':
          description: Access control modified or list of access controls.
          schema:
            type: object
            $ref: '#/definitions/AccessControl'
        '400':
          description: Bad Request.
          schema:
            type: object
            $ref: '#/definitions/BadRequest'
        default:
          description: Unexpected error
          schema:
            type: object
            $ref: '#/definitions/Error'
      security:
        - authorization:
            - openid
            - email
            - profile
    put:
      summary: Edit a permissions on namespace.
      description: |
        Edit a permissions on namespace.
      parameters:
        - name: namespace
          in: path
          description: Namespace
          required: true
          type: string
        - name: user
          in: query
          description: "User's email or 'public'."
          required: true
          type: string
        - name: roles
          in: query
          description: 'List of comma seperated roles -- i.e. Read,Write,Create,Redact,Manage or "All" or "Nothing". NO SPACES.'
          required: true
          type: string
      tags:
        - NamespacePermissions
      responses:
        '200':
          description: Access control modified.
          schema:
            type: object
            $ref: '#/definitions/AccessControl'
        '400':
          description: Bad Request.
          schema:
            type: object
            $ref: '#/definitions/BadRequest'
        default:
          description: Unexpected error
          schema:
            type: object
            $ref: '#/definitions/Error'
      security:
        - authorization:
            - openid
            - email
            - profile
    delete:
      summary: Delete a permission on namespace.
      description: |
        Delete a permission on namespace.
      parameters:
        - name: namespace
          in: path
          description: Namespace
          required: true
          type: string
        - name: user
          in: query
          description: "User's email or 'public'."
          required: true
          type: string
      tags:
        - NamespacePermissions
      responses:
        '200':
          description: Access control modified.
          schema:
            type: object
            $ref: '#/definitions/AccessControl'
        '400':
          description: Bad Request.
          schema:
            type: object
            $ref: '#/definitions/BadRequest'
        default:
          description: Unexpected error
          schema:
            type: object
            $ref: '#/definitions/Error'
      security:
        - authorization:
            - openid
            - email
            - profile
  '/api/v1/methods/permissions':
    post:
      summary: List permissions for multiple methods.
      description: |
        List permissions for multiple methods.
      parameters:
        - name: methods
          in: body
          description: methods for which to retrieve permissions
          required: true
          schema:
            type: array
            items:
              $ref: '#/definitions/EntityId'
      tags:
        - Permissions
      responses:
        '200':
          description: An array of entity -> permissions pairs.
          schema:
            type: array
            items:
              $ref: '#/definitions/AccessControlPair'
        default:
          description: Unexpected error
          schema:
            type: object
            $ref: '#/definitions/Error'
      security:
        - authorization:
            - openid
            - email
            - profile
    put:
      summary: Upsert permissions for multiple methods.
      description: |
        Insert or update permissions for multiple methods.
      parameters:
        - name: methods
          in: body
          description: array of entity -> permissions pairs to upsert
          required: true
          schema:
            type: array
            items:
              $ref: '#/definitions/AccessControlPair'
      tags:
        - Permissions
      responses:
        '200':
          description: An array of entity -> permissions pairs.
          schema:
            type: array
            items:
              $ref: '#/definitions/AccessControlPair'
        default:
          description: Unexpected error
          schema:
            type: object
            $ref: '#/definitions/Error'
      security:
        - authorization:
            - openid
            - email
            - profile
  '/api/v1/methods/{namespace}/{name}/{snapshotId}/permissions':
    get:
      summary: List permissions on a specific method.
      description: |
        List permissions on a specific method.
      parameters:
        - name: namespace
          in: path
          description: Namespace
          required: true
          type: string
        - name: name
          in: path
          description: Name
          required: true
          type: string
        - name: snapshotId
          in: path
          description: SnapshotId
          required: true
          type: number
      tags:
        - Permissions
      responses:
        '200':
          description: An array of permissions.
          schema:
            type: array
            items:
              $ref: '#/definitions/AccessControl'
        default:
          description: Unexpected error
          schema:
            type: object
            $ref: '#/definitions/Error'
      security:
        - authorization:
            - openid
            - email
            - profile
    post:
      summary: Add a permissions on a specific method.
      description: >
        Add a permissions on a specific method. Will edit if user already has
        some permission on a specific method.
      parameters:
        - name: namespace
          in: path
          description: Namespace
          required: true
          type: string
        - name: name
          in: path
          description: Name
          required: true
          type: string
        - name: snapshotId
          in: path
          description: SnapshotId
          required: true
          type: number
        - name: user
          in: query
          description: "User's email or 'public'."
          required: false
          type: string
        - name: roles
          in: query
          description: 'List of comma seperated roles -- i.e. Read,Write,Create,Redact,Manage or "All" or "Nothing". NO SPACES.'
          required: false
          type: string
        - name: list of permissions
          in: body
          description: |
            List of access control objects (user, roles). Can edit or delete (with 'Nothing')
            permissions using this path as well.
          required: false
          schema:
            type: array
            items:
              $ref: '#/definitions/AccessControl'
      tags:
        - Permissions
      responses:
        '200':
          description: Access control modified.
          schema:
            type: object
            $ref: '#/definitions/AccessControl'
        '400':
          description: Bad Request.
          schema:
            type: object
            $ref: '#/definitions/BadRequest'
        default:
          description: Unexpected error
          schema:
            type: object
            $ref: '#/definitions/Error'
      security:
        - authorization:
            - openid
            - email
            - profile
    put:
      summary: Edit a permissions on a specific method.
      description: |
        Edit a permissions on a specific method.
      parameters:
        - name: namespace
          in: path
          description: Namespace
          required: true
          type: string
        - name: name
          in: path
          description: Name
          required: true
          type: string
        - name: snapshotId
          in: path
          description: SnapshotId
          required: true
          type: number
        - name: user
          in: query
          description: "User's email or 'public'."
          required: true
          type: string
        - name: roles
          in: query
          description: 'List of comma seperated roles -- i.e. Read,Write,Create,Redact,Manage or "All" or "Nothing". NO SPACES.'
          required: true
          type: string
      tags:
        - Permissions
      responses:
        '200':
          description: Access control modified.
          schema:
            type: object
            $ref: '#/definitions/AccessControl'
        '400':
          description: Bad Request.
          schema:
            type: object
            $ref: '#/definitions/BadRequest'
        default:
          description: Unexpected error
          schema:
            type: object
            $ref: '#/definitions/Error'
      security:
        - authorization:
            - openid
            - email
            - profile
    delete:
      summary: Delete a permission on a specific method.
      description: |
        Delete a permission on a specific method.
      parameters:
        - name: namespace
          in: path
          description: Namespace
          required: true
          type: string
        - name: name
          in: path
          description: Name
          required: true
          type: string
        - name: snapshotId
          in: path
          description: SnapshotId
          required: true
          type: number
        - name: user
          in: query
          description: "User's email or 'public'."
          required: true
          type: string
      tags:
        - Permissions
      responses:
        '200':
          description: Access control modified.
          schema:
            type: object
            $ref: '#/definitions/AccessControl'
        '400':
          description: Bad Request.
          schema:
            type: object
            $ref: '#/definitions/BadRequest'
        default:
          description: Unexpected error
          schema:
            type: object
            $ref: '#/definitions/Error'
      security:
        - authorization:
            - openid
            - email
            - profile
  '/api/v1/configurations/{namespace}/permissions':
    get:
      summary: List permissions on namespace.
      description: |
        List permissions on namespace.
      parameters:
        - name: namespace
          in: path
          description: Namespace
          required: true
          type: string
      tags:
        - NamespacePermissions
      responses:
        '200':
          description: An array of permissions.
          schema:
            type: array
            items:
              $ref: '#/definitions/AccessControl'
        default:
          description: Unexpected error
          schema:
            type: object
            $ref: '#/definitions/Error'
      security:
        - authorization:
            - openid
            - email
            - profile
    post:
      summary: Add a permissions on namespace.
      description: >
        Add a permissions on namespace. Will edit if user already has some
        permission on namespace.
      parameters:
        - name: namespace
          in: path
          description: Namespace
          required: true
          type: string
        - name: user
          in: query
          description: "User's email or 'public'."
          required: false
          type: string
        - name: roles
          in: query
          description: 'List of comma seperated roles -- i.e. Read,Write,Create,Redact,Manage or "All" or "Nothing". NO SPACES.'
          required: false
          type: string
        - name: list of permissions
          in: body
          description: |
            List of access control objects (user, roles). Can edit or delete (with 'Nothing')
            permissions using this path as well.
          required: false
          schema:
            type: array
            items:
              $ref: '#/definitions/AccessControl'
      tags:
        - NamespacePermissions
      responses:
        '200':
          description: Access control modified.
          schema:
            type: object
            $ref: '#/definitions/AccessControl'
        '400':
          description: Bad Request.
          schema:
            type: object
            $ref: '#/definitions/BadRequest'
        default:
          description: Unexpected error
          schema:
            type: object
            $ref: '#/definitions/Error'
      security:
        - authorization:
            - openid
            - email
            - profile
    put:
      summary: Edit a permissions on namespace.
      description: |
        Edit a permissions on namespace.
      parameters:
        - name: namespace
          in: path
          description: Namespace
          required: true
          type: string
        - name: user
          in: query
          description: "User's email or 'public'."
          required: true
          type: string
        - name: roles
          in: query
          description: 'List of comma seperated roles -- i.e. Read,Write,Create,Redact,Manage or "All" or "Nothing". NO SPACES.'
          required: true
          type: string
      tags:
        - NamespacePermissions
      responses:
        '200':
          description: Access control modified.
          schema:
            type: object
            $ref: '#/definitions/AccessControl'
        '400':
          description: Bad Request.
          schema:
            type: object
            $ref: '#/definitions/BadRequest'
        default:
          description: Unexpected error
          schema:
            type: object
            $ref: '#/definitions/Error'
      security:
        - authorization:
            - openid
            - email
            - profile
    delete:
      summary: Delete a permission on namespace.
      description: |
        Delete a permission on namespace.
      parameters:
        - name: namespace
          in: path
          description: Namespace
          required: true
          type: string
        - name: user
          in: query
          description: "User's email or 'public'."
          required: true
          type: string
      tags:
        - NamespacePermissions
      responses:
        '200':
          description: Access control modified.
          schema:
            type: object
            $ref: '#/definitions/AccessControl'
        '400':
          description: Bad Request.
          schema:
            type: object
            $ref: '#/definitions/BadRequest'
        default:
          description: Unexpected error
          schema:
            type: object
            $ref: '#/definitions/Error'
      security:
        - authorization:
            - openid
            - email
            - profile
  '/api/v1/configurations/{namespace}/{name}/{snapshotId}/permissions':
    get:
      summary: List permissions on a specific method.
      description: |
        List permissions on a specific method.
      parameters:
        - name: namespace
          in: path
          description: Namespace
          required: true
          type: string
        - name: name
          in: path
          description: Name
          required: true
          type: string
        - name: snapshotId
          in: path
          description: SnapshotId
          required: true
          type: number
      tags:
        - Permissions
      responses:
        '200':
          description: An array of permissions.
          schema:
            type: array
            items:
              $ref: '#/definitions/AccessControl'
        default:
          description: Unexpected error
          schema:
            type: object
            $ref: '#/definitions/Error'
      security:
        - authorization:
            - openid
            - email
            - profile
    post:
      summary: Add a permissions on a specific method.
      description: >
        Add a permissions on a specific method. Will edit if user already has
        some permission on a specific method.
      parameters:
        - name: namespace
          in: path
          description: Namespace
          required: true
          type: string
        - name: name
          in: path
          description: Name
          required: true
          type: string
        - name: snapshotId
          in: path
          description: SnapshotId
          required: true
          type: number
        - name: user
          in: query
          description: "User's email or 'public'."
          required: false
          type: string
        - name: roles
          in: query
          description: 'List of comma seperated roles -- i.e. Read,Write,Create,Redact,Manage or "All" or "Nothing". NO SPACES.'
          required: false
          type: string
        - name: list of permissions
          in: body
          description: |
            List of access control objects (user, roles). Can edit or delete (with 'Nothing')
            permissions using this path as well.
          required: false
          schema:
            type: array
            items:
              $ref: '#/definitions/AccessControl'
      tags:
        - Permissions
      responses:
        '200':
          description: Access control modified.
          schema:
            type: object
            $ref: '#/definitions/AccessControl'
        '400':
          description: Bad Request.
          schema:
            type: object
            $ref: '#/definitions/BadRequest'
        default:
          description: Unexpected error
          schema:
            type: object
            $ref: '#/definitions/Error'
      security:
        - authorization:
            - openid
            - email
            - profile
    put:
      summary: Edit a permissions on a specific method.
      description: |
        Edit a permissions on a specific method.
      parameters:
        - name: namespace
          in: path
          description: Namespace
          required: true
          type: string
        - name: name
          in: path
          description: Name
          required: true
          type: string
        - name: snapshotId
          in: path
          description: SnapshotId
          required: true
          type: number
        - name: user
          in: query
          description: "User's email or 'public'."
          required: true
          type: string
        - name: roles
          in: query
          description: 'List of comma seperated roles -- i.e. Read,Write,Create,Redact,Manage or "All" or "Nothing". NO SPACES.'
          required: true
          type: string
      tags:
        - Permissions
      responses:
        '200':
          description: Access control modified.
          schema:
            type: object
            $ref: '#/definitions/AccessControl'
        '400':
          description: Bad Request.
          schema:
            type: object
            $ref: '#/definitions/BadRequest'
        default:
          description: Unexpected error
          schema:
            type: object
            $ref: '#/definitions/Error'
      security:
        - authorization:
            - openid
            - email
            - profile
    delete:
      summary: Delete a permission on a specific method.
      description: |
        Delete a permission on a specific method.
      parameters:
        - name: namespace
          in: path
          description: Namespace
          required: true
          type: string
        - name: name
          in: path
          description: Name
          required: true
          type: string
        - name: snapshotId
          in: path
          description: SnapshotId
          required: true
          type: number
        - name: user
          in: query
          description: "User's email or 'public'."
          required: true
          type: string
      tags:
        - Permissions
      responses:
        '200':
          description: Access control modified.
          schema:
            type: object
            $ref: '#/definitions/AccessControl'
        '400':
          description: Bad Request.
          schema:
            type: object
            $ref: '#/definitions/BadRequest'
        default:
          description: Unexpected error
          schema:
            type: object
            $ref: '#/definitions/Error'
      security:
        - authorization:
            - openid
            - email
            - profile
  '/api/v1/configurations/permissions':
    post:
      summary: List permissions for multiple configurations.
      description: |
        List permissions for multiple configurations.
      parameters:
        - name: configurations
          in: body
          description: configurations for which to retrieve permissions
          required: true
          schema:
            type: array
            items:
              $ref: '#/definitions/EntityId'
      tags:
        - Permissions
      responses:
        '200':
          description: An array of entity -> permissions pairs.
          schema:
            type: array
            items:
              $ref: '#/definitions/AccessControlPair'
        default:
          description: Unexpected error
          schema:
            type: object
            $ref: '#/definitions/Error'
      security:
        - authorization:
            - openid
            - email
            - profile
securityDefinitions:
  authorization:
    type: oauth2
    authorizationUrl: 'https://accounts.google.com/o/oauth2/auth'
    flow: implicit
    scopes:
      openid: open id authorization
      email: email authorization
      profile: profile authorization
definitions:
  EntityId:
    type: object
    properties:
      namespace:
        type: string
        description: Namespace which contains AgoraEntity.
      name:
        type: string
        description: Name of the AgoraEntity.
      snapshotId:
        type: integer
        description: SnapshotId of AgoraEntity.
  EntityShort:
    type: object
    properties:
      namespace:
        type: string
        description: Namespace which contains AgoraEntity.
      name:
        type: string
        description: Name of the AgoraEntity.
      snapshotId:
        type: integer
        description: SnapshotId of AgoraEntity.
      managers:
        type: array
        items:
          type: string
        description: Owners of this AgoraEntity.
      public:
        type: boolean
        description: If this AgoraEntity is publicly readable.
  MethodQuery:
    type: object
    properties:
      namespace:
        type: string
        description: Namespace which contains AgoraEntity.
        default: YOUR_NAMESPACE
      name:
        type: string
        description: Name of the AgoraEntity.
        default: BWA
      synopsis:
        type: string
        description: Synopsis which contains AgoraEntity.
        default: Quickly aligns short nucleotide sequences.
      documentation:
        type: string
        description: Documentation of the AgoraEntity.
        default: |
          BWA is a software package for mapping low-divergent sequences
          against a large reference genome, such as the human genome.
          It consists of three algorithms: BWA-backtrack, BWA-SW and BWA-MEM.
      payload:
        type: string
        description: Payload of method -- must be in WDL format
        default: >
          task wc {File in_file command { cat ${in_file} | wc -l } output { Int
          count = read_int(stdout()) }}
      entityType:
        type: string
        description: Type of the AgoraEntity -- Task or Workflow.
        default: Task
  ConfigurationQuery:
    type: object
    properties:
      namespace:
        type: string
        description: Namespace which contains Configuration.
        default: YOUR_NAMESPACE
      name:
        type: string
        description: Name of the Configuration.
        default: quick-BWA-config
      synopsis:
        type: string
        description: Synopsis which contains Configuration.
        default: Quick synopsis of configuration.
      documentation:
        type: string
        description: Documentation of the Configuration.
        default: |
          Example configuraion with an associated method.
      payload:
        type: string
        description: Payload of method -- must be in WDL format
        default: >
          { "methodRepoMethod": { "methodNamespace": "YOUR_NAMESPACE",
          "methodName": "BWA", "methodVersion": 1}}
      entityType:
        type: string
        description: Can only be Configuration.
        default: Configuration
  ConfigurationResponse:
    type: object
    properties:
      method:
        type: object
      namespace:
        type: string
        description: Namespace which contains AgoraEntity.
        default: YOUR_NAMESPACE
      name:
        type: string
        description: Name of the AgoraEntity.
        default: BWA
      snapshotId:
        type: integer
        description: SnapshotId of AgoraEntity
      synopsis:
        type: string
        description: Synopsis which contains AgoraEntity.
        default: Quickly aligns short nucleotide sequences.
      documentation:
        type: string
        description: Documentation of the AgoraEntity. MUST BE REQUESTED EXPLICITLY.
        default: |
          BWA is a software package for mapping low-divergent sequences
          against a large reference genome, such as the human genome.
          It consists of three algorithms: BWA-backtrack, BWA-SW and BWA-MEM.
      createDate:
        type: string
        description: Timestamp of creation
      url:
        type: string
        description: URL where resource can be accessed.
      payload:
        type: string
        description: Payload of configuration. MUST BE REQUESTED EXPLICITLY.
        default: >
          { "methodRepoMethod": { "methodNamespace": "YOUR_NAMESPACE",
          "methodName": "BWA", "methodVersion": 1}}
      entityType:
        type: string
        description: Type of the AgoraEntity -- Task or Workflow.
        default: Task
  ConfigurationResponseWithPayloadObject:
    type: object
    properties:
      method:
        type: object
      namespace:
        type: string
        description: Namespace which contains AgoraEntity.
        default: YOUR_NAMESPACE
      name:
        type: string
        description: Name of the AgoraEntity.
        default: BWA
      snapshotId:
        type: integer
        description: SnapshotId of AgoraEntity
      synopsis:
        type: string
        description: Synopsis which contains AgoraEntity.
        default: Quickly aligns short nucleotide sequences.
      documentation:
        type: string
        description: Documentation of the AgoraEntity. MUST BE REQUESTED EXPLICITLY.
        default: |
          BWA is a software package for mapping low-divergent sequences
          against a large reference genome, such as the human genome.
          It consists of three algorithms: BWA-backtrack, BWA-SW and BWA-MEM.
      createDate:
        type: string
        description: Timestamp of creation
      url:
        type: string
        description: URL where resource can be accessed.
      payloadObject:
        $ref: '#/definitions/ConfigurationPayload'
      entityType:
        type: string
        description: Type of the AgoraEntity -- Task or Workflow.
        default: Task
  MethodDefinition:
    type: object
    properties:
      namespace:
        type: string
        description: Namespace which contains the method.
      name:
        type: string
        description: Name of the method.
      synopsis:
        type: string
        description: Synopsis of the method
      managers:
        type: array
        items:
          type: string
        description: managers of this method
      public:
        type: boolean
        description: true if the method is publicly readable
      numConfigurations:
        type: number
        description: count of configurations associated with this method
      numSnapshots:
        type: number
        description: count of snapshots of this method
      entityType:
        type: string
        description: always "Workflow".
        default: Workflow
  MethodResponse:
    type: object
    properties:
      namespace:
        type: string
        description: Namespace which contains AgoraEntity.
        default: YOUR_NAMESPACE
      name:
        type: string
        description: Name of the AgoraEntity.
        default: BWA
      snapshotId:
        type: integer
        description: SnapshotId of AgoraEntity
      synopsis:
        type: string
        description: Synopsis which contains AgoraEntity.
        default: Quickly aligns short nucleotide sequences.
      documentation:
        type: string
        description: Documentation of the AgoraEntity. MUST BE REQUESTED EXPLICITLY.
        default: |
          BWA is a software package for mapping low-divergent sequences
          against a large reference genome, such as the human genome.
          It consists of three algorithms: BWA-backtrack, BWA-SW and BWA-MEM.
      createDate:
        type: string
        description: Timestamp of creation
      url:
        type: string
        description: URL where resource can be accessed.
      payload:
        type: string
        description: Payload of method -- must be in WDL format. MUST BE REQUESTED EXPLICITLY.
        default: >
          task wc {File in_file command { cat ${in_file} | wc -l } output { Int
          count = read_int(stdout()) }}
      entityType:
        type: string
        description: Type of the AgoraEntity -- Task or Workflow.
        default: Task
  AccessControl:
    type: object
    properties:
      user:
        type: string
        description: "A user's email or 'public' to give access to all users."
        default: test-user@broadinstitute.org
      roles:
        type: array
        description: The roles a user has on an entity.
        items:
          type: string
        default:
          - Read
          - Write
          - Create
          - Redact
          - Manage
  AccessControlPair:
    type: object
    properties:
      entity:
        $ref: '#/definitions/EntityShort'
      acls:
        type: array
        items:
          $ref: '#/definitions/AccessControl'
  ConfigurationPayload:
    type: object
    properties:
      name:
        type: string
        description: Name of this config
        default: cancer_exome_pipeline_v2
      namespace:
        type: string
        description: Namespace of this config
        default: broad-dsde-dev
      methodRepoMethod:
        type: object
        properties:
          methodName:
            type: string
            description: Name of referenced method
            default: cancer_exome_pipeline_v2
          methodNamespace:
            type: string
            description: Namespace of referenced method
            default: broad-dsde-dev,
          methodVersion:
            type: integer
            description: Snapshot ID of referenced method
            default: 1
      outputs:
        type: object
        description: Map[String, AttributeString] from method's WDL outputs to fields in the workspace data model
      inputs:
        type: object
        description: Map[String, AttributeString] from method's WDL inputs to fields in the workspace data model
      rootEntityType:
        type: string
        default: pair
      prerequisites:
        type: object
        description: Map[String, AttributeString]
        default: {}
      methodConfigVersion:
        type: integer
        description: Snapshot ID of this config
        default: 1
      deleted:
        type: boolean
        description: Has this config been deleted?
        default: false
  BadRequest:
    type: object
    properties:
      code:
        type: integer
        default: 400
      message:
        type: string
        default: Bad Request
  Error:
    type: object
    properties:
      code:
        type: integer
        default: 500
      message:
        type: string
        default: Internal Server Error
  NotFound:
    type: object
    properties:
      code:
        type: integer
        default: 404
      message:
        type: string
        default: Not Found

